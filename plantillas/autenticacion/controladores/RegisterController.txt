<?php

namespace App\Http\Controllers\Auth;

use App\Role;
use App\User;
use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Foundation\Auth\RegistersUsers;

class RegisterController extends Controller
{

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/';

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'username' => ['required', 'string', 'min:$LONGITUD_MINIMA_USUARIO$', 'max:$LONGITUD_MAXIMA_USUARIO$', 'unique:users'],
            'password' => ['required', 'string', 'min:$LONGITUD_MINIMA_CONTRASENA$', 'confirmed']
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\User
     */
    protected function create(array $data)
    {
        $cantidadRoles = Role::count();

        if ($cantidadRoles > 0) {
            $idRol = Role::all()->first()->id;
        } else {
            $rol = new Role();
            $rol->name = Role::PRIMER_ROL;
            $rol->save();

            $idRol = $rol->id;
        }

        return User::create([
            'username' => $data['username'],
            'password' => Hash::make($data['password']),
            'role_id' => $idRol,
        ]);
    }

    /**
     * Handle a registration request for the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function register(Request $request)
    {
        $this->validator($request->all())->validate();

        event(new Registered($user = $this->create($request->all())));

        return $this->registered($request, $user)
            ?: redirect($this->redirectPath());
    }

}
